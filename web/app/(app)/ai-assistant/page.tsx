"use client";

import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { 
  Bot, Send, Mic, Image as ImageIcon, 
  Loader2, ChevronDown, X, ChevronRight,
  MessageSquare, Settings, Save, Download,
  CheckCircle2, Info, Camera, Leaf, Sun, CloudRain,
  Tractor, Droplets, Sprout, Wheat, Users,
} from "lucide-react";
import { ChatInterface } from "@/components/ai-assistant/ChatInterface";
import { FeatureCard } from "@/components/ai-assistant/FeatureCard";
import { useAIAssistant } from "@/store/ai-assistant/useAIAssistant";
import DashboardHeader from "@/components/DashboardHeader";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export default function AIAssistantPage() {
  const { messages, isLoading } = useAIAssistant();
  const [showFeatures, setShowFeatures] = useState(true);

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { type: "spring", stiffness: 100 }
    }
  };

  // Hide features when chat starts
  useEffect(() => {
    if (messages.length > 0) {
      setShowFeatures(false);
    }
  }, [messages]);

  // Sample success stories data
  const successStories = {
    title: "рд╕рдлрд▓рддрд╛ рдХреА рдХрд╣рд╛рдирд┐рдпрд╛рдВ",
    viewAllText: "рд╕рднреА рджреЗрдЦреЗрдВ",
    stories: [
      {
        tag: "рдлрд╕рд▓ рдЕрдиреБрд╢рдВрд╕рд╛",
        tagBg: "bg-green-100",
        tagText: "text-green-800",
        title: "рдЧреЗрд╣реВрдВ рдХреА рдЙрдкрдЬ 30% рдмрдврд╝реА",
        description: "AI рд╕рд╣рд╛рдпрдХ рдиреЗ рдЗрд╖реНрдЯрддрдо рдмреБрд╡рд╛рдИ рд╕рдордп рдФрд░ рдЙрд░реНрд╡рд░рдХ рдЕрдиреБрдкреНрд░рдпреЛрдЧ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХреА, рдЬрд┐рд╕рд╕реЗ рдЙрдкрдЬ рдореЗрдВ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╕реБрдзрд╛рд░ рд╣реБрдЖред",
        date: "2 рд╕рдкреНрддрд╛рд╣ рдкрд╣рд▓реЗ",
        readMoreText: "рдФрд░ рдкрдврд╝реЗрдВ",
        buttonText: "text-green-600",
        gradient: "from-green-50 to-green-100",
        border: "border-green-200",
        icon: "ЁЯМ╛"
      },
      {
        tag: "рд░реЛрдЧ рдкрд╣рдЪрд╛рди",
        tagBg: "bg-amber-100",
        tagText: "text-amber-800",
        title: "рдЖрд▓реВ рдХреА рдлрд╕рд▓ рдХреЛ рдЕрд░реНрд▓реА рдмреНрд▓рд╛рдЗрдЯ рд╕реЗ рдмрдЪрд╛рдпрд╛",
        description: "рдХрд┐рд╕рд╛рди рдиреЗ AI рдЫрд╡рд┐ рдкрд╣рдЪрд╛рди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЕрд░реНрд▓реА рдмреНрд▓рд╛рдЗрдЯ рдХреА рдкрд╣рдЪрд╛рди рдХреА рдФрд░ рд╡реНрдпрд╛рдкрдХ рдХреНрд╖рддрд┐ рд╕реЗ рдкрд╣рд▓реЗ рдЙрдкрдЪрд╛рд░ рд▓рд╛рдЧреВ рдХрд┐рдпрд╛ред",
        date: "1 рдорд╣реАрдиреЗ рдкрд╣рд▓реЗ",
        readMoreText: "рдФрд░ рдкрдврд╝реЗрдВ",
        buttonText: "text-amber-600",
        gradient: "from-amber-50 to-amber-100",
        border: "border-amber-200",
        icon: "ЁЯеФ"
      },
      {
        tag: "рдмрд╛рдЬрд╛рд░ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐",
        tagBg: "bg-blue-100",
        tagText: "text-blue-800",
        title: "рдЗрд╖реНрдЯрддрдо рдмрд┐рдХреНрд░реА рд╕рдордп рд╕реЗ рд▓рд╛рдн рдмрдврд╝рд╛",
        description: "рдореВрд▓реНрдп рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдиреЗ рдХрд┐рд╕рд╛рди рдХреЛ рдмрд╛рдЬрд╛рд░ рдореЗрдВ рдкреНрд░рд╡реЗрд╢ рдХреЗ рд╕рдордп рдХрд╛ рдЕрдиреБрдорд╛рди рд▓рдЧрд╛рдиреЗ рдореЗрдВ рдорджрдж рдХреА, рдЬрд┐рд╕рд╕реЗ рдЙрдирдХреА рдЙрдкрдЬ рдХреЗ рд▓рд┐рдП 25% рдЕрдзрд┐рдХ рдмрд┐рдХреНрд░реА рдореВрд▓реНрдп рдорд┐рд▓рд╛ред",
        date: "3 рдорд╣реАрдиреЗ рдкрд╣рд▓реЗ",
        readMoreText: "рдФрд░ рдкрдврд╝реЗрдВ",
        buttonText: "text-blue-600",
        gradient: "from-blue-50 to-blue-100",
        border: "border-blue-200",
        icon: "ЁЯУИ"
      }
    ]
  };

  // Seasonal farming tips
  const seasonalTips = {
    title: "рдореМрд╕рдореА рдЦреЗрддреА рдХреЗ рдЯрд┐рдкреНрд╕",
    tips: [
      {
        title: "рд░рдмреА рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдорд┐рдЯреНрдЯреА рдХреА рддреИрдпрд╛рд░реА",
        description: "рдЕрдкрдиреА рдорд┐рдЯреНрдЯреА рдХреЛ рд░рдмреА рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдХреИрд╕реЗ рддреИрдпрд╛рд░ рдХрд░реЗрдВ, рдЗрд╕рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдиреЗрдВ",
        icon: "ЁЯМ▒",
        color: "green"
      },
      {
        title: "рдЬрд▓ рдкреНрд░рдмрдВрдзрди рддрдХрдиреАрдХ",
        description: "рд╕реВрдЦреЗ рдХреЗ рдореМрд╕рдо рдореЗрдВ рдкрд╛рдиреА рдХреЗ рдХреБрд╢рд▓ рдЙрдкрдпреЛрдЧ рдХреЗ рд▓рд┐рдП рд╕рд┐рдВрдЪрд╛рдИ рд░рдгрдиреАрддрд┐рдпрд╛рдВ",
        icon: "ЁЯТз",
        color: "blue"
      },
      {
        title: "рдЬреИрд╡рд┐рдХ рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг",
        description: "рд░рд╛рд╕рд╛рдпрдирд┐рдХ рдХреАрдЯрдирд╛рд╢рдХреЛрдВ рдХреЗ рдмрд┐рдирд╛ рдХреАрдЯреЛрдВ рд╕реЗ рдирд┐рдкрдЯрдиреЗ рдХреЗ рдкреНрд░рд╛рдХреГрддрд┐рдХ рддрд░реАрдХреЗ",
        icon: "ЁЯРЮ",
        color: "amber"
      }
    ]
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
      <DashboardHeader
        title="рдХреГрд╖рд┐ AI рд╕рд╣рд╛рдпрдХ"
        subtitle="рдЖрдкрдХрд╛ рдмреБрджреНрдзрд┐рдорд╛рди рдЦреЗрддреА рд╕рд╛рдереА"
        icon={<Leaf className="h-6 w-6 text-green-600" />}
      />

      <div className="container mx-auto px-4 py-6">
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate="visible"
          className="space-y-6"
        >
          {/* Hero Section */}
          <motion.div 
            className="relative overflow-hidden rounded-2xl bg-gradient-to-r from-green-600 to-green-500 text-white mb-10"
            variants={itemVariants}
          >
            <div className="absolute inset-0 opacity-10">
              <div className="absolute -right-20 -top-20 h-80 w-80 rounded-full bg-white/20"></div>
              <div className="absolute -left-20 -bottom-20 h-80 w-80 rounded-full bg-white/20"></div>
              <div className="grid grid-cols-10 grid-rows-10 gap-1 h-full w-full">
                {Array.from({ length: 100 }).map((_, i) => (
                  <div key={i} className="bg-white/5 rounded-sm"></div>
                ))}
              </div>
            </div>
            
            <div className="relative p-8 md:p-12 flex flex-col md:flex-row items-center">
              <div className="md:w-2/3 mb-8 md:mb-0">
                <h1 className="text-4xl md:text-5xl font-bold mb-4">
                  рдХреГрд╖рд┐ AI рд╕рд╣рд╛рдпрдХ <span className="text-green-200">Groq</span>
                </h1>
                <p className="text-xl text-green-100 mb-6 max-w-2xl">
                  рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдФрд░ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдкреНрд░рджрд╛рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдиреНрдирдд AI рджреНрд╡рд╛рд░рд╛ рд╕рдВрдЪрд╛рд▓рд┐рдд рдЖрдкрдХрд╛ рдмреБрджреНрдзрд┐рдорд╛рди рдЦреЗрддреА рд╕рд╛рдереА
                </p>
                <div className="flex flex-wrap gap-3 mb-6">
                  <Badge className="bg-white/20 border-none text-white px-3 py-1 text-sm">
                    <CheckCircle2 className="h-4 w-4 mr-1" />
                    <span>рддрддреНрдХрд╛рд▓ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛</span>
                  </Badge>
                  <Badge className="bg-white/20 border-none text-white px-3 py-1 text-sm">
                    <CheckCircle2 className="h-4 w-4 mr-1" />
                    <span>рдмрд╣реБрднрд╛рд╖реА рд╕рдорд░реНрдерди</span>
                  </Badge>
                  <Badge className="bg-white/20 border-none text-white px-3 py-1 text-sm">
                    <CheckCircle2 className="h-4 w-4 mr-1" />
                    <span>рдЫрд╡рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг</span>
                  </Badge>
                </div>
                <div className="flex flex-wrap gap-4">
                  <Button size="lg" className="bg-white text-green-700 hover:bg-green-100">
                    <MessageSquare className="h-5 w-5 mr-2" />
                    <span>рдЪреИрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ</span>
                  </Button>
                  <Button size="lg" variant="outline" className="bg-white/10 text-white border-white/30 hover:bg-white/20">
                    <Info className="h-5 w-5 mr-2" />
                    <span>рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ</span>
                  </Button>
                </div>
              </div>
              
              <div className="md:w-1/3 flex justify-center">
                <div className="relative">
                  <div className="absolute inset-0 bg-white rounded-full opacity-20 animate-pulse"></div>
                  <div className="absolute inset-4 bg-white rounded-full opacity-30"></div>
                  <div className="absolute inset-8 bg-white rounded-full opacity-40"></div>
                  <div className="relative h-48 w-48 flex items-center justify-center">
                    <motion.div
                      animate={{ 
                        rotate: [0, 5, 0, -5, 0],
                        y: [0, -5, 0, 5, 0]
                      }}
                      transition={{ duration: 5, repeat: Infinity }}
                      className="text-7xl"
                    >
                      ЁЯзСтАНЁЯМ╛
                    </motion.div>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>

          {/* Main Chat Interface */}
          <motion.div variants={itemVariants}>
            <ChatInterface />
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
}