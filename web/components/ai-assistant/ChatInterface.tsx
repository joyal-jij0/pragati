"use client";

import React, { useState, useRef, useEffect } from "react";
import { motion } from "framer-motion";
import { Send, Image as ImageIcon, Mic, Paperclip, Smile, Loader2, Leaf, Sun, CloudRain, MapPin, FileText, HelpCircle, Globe, Trash2, MicOff } from "lucide-react";
import { ChatMessage } from "./ChatMessage";
import { ImageUploadPreview } from "./ImageUploadPreview";
import { FarmerSidebar } from "./FarmerSidebar";
import { FeatureCard } from "./FeatureCard";
import { Message } from "@/types/ai-assistant";
import { useAIAssistant } from "@/store/ai-assistant/useAIAssistant";
import { startRecording, stopRecording } from "@/services/ai-assistant/speechService";
import { speechService } from "@/services/ai-assistant/speechService";

// Define supported languages
const languages = [
  { code: "hi", name: "‡§π‡§ø‡§Ç‡§¶‡•Ä", flag: "üáÆüá≥" },
  { code: "en", name: "English", flag: "üá¨üáß" },
  { code: "pa", name: "‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä", flag: "üáÆüá≥" },
  { code: "bn", name: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", flag: "üáÆüá≥" },
  { code: "te", name: "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å", flag: "üáÆüá≥" },
  { code: "ta", name: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç", flag: "üáÆüá≥" },
  { code: "mr", name: "‡§Æ‡§∞‡§æ‡§†‡•Ä", flag: "üáÆüá≥" },
];

export const ChatInterface: React.FC = () => {
  const { messages, isLoading, sendMessage, error, clearChat } = useAIAssistant();
  const [inputText, setInputText] = useState("");
  const [uploadedImages, setUploadedImages] = useState<File[]>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [showLanguageSelector, setShowLanguageSelector] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState(languages[0]);
  
  // Speech recognition states
  const [isRecording, setIsRecording] = useState(false);
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);
  const [isProcessingSpeech, setIsProcessingSpeech] = useState(false);
  
  // Initialize with welcome message if no messages exist
  useEffect(() => {
    if (messages.length === 0) {
      // This will be handled by the Zustand store's initial state
    }
  }, [messages]);
  
  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);
  
  const handleSendMessage = async () => {
    if ((!inputText.trim() && uploadedImages.length === 0) || isLoading) return;
    
    // Add language code to the message
    const textWithLanguage = `[LANG:${selectedLanguage.code}] ${inputText}`;
    
    // Use the Zustand store's sendMessage function
    await sendMessage(textWithLanguage, uploadedImages);
    
    // Clear input and uploaded images
    setInputText("");
    setUploadedImages([]);
  };
  
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };
  
  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      setUploadedImages([...uploadedImages, ...Array.from(files)]);
    }
  };
  
  const handleRemoveImage = (index: number) => {
    setUploadedImages(prev => prev.filter((_, i) => i !== index));
  };
  
  const handleTopicSelect = (topic: string) => {
    setInputText(`Tell me about ${topic}`);
  };
  
  const handleLanguageSelect = (language: typeof languages[0]) => {
    // Clear chat when language is changed
    clearChat();
    setSelectedLanguage(language);
    setShowLanguageSelector(false);
  };
  
  const handleClearChat = () => {
    clearChat();
  };
  
  // Handle speech-to-text recording
  const handleSpeechToText = async () => {
    try {
      if (isRecording) {
        // Stop recording
        setIsRecording(false);
        setIsProcessingSpeech(true);
        
        if (mediaRecorder) {
          const audioBlob = await stopRecording(mediaRecorder);
          
          // Convert speech to text
          const transcribedText = await speechService.speechToText(audioBlob, selectedLanguage.code);
          
          // Set the transcribed text as input
          if (transcribedText) {
            setInputText(transcribedText);
          }
        }
        
        setMediaRecorder(null);
        setIsProcessingSpeech(false);
      } else {
        // Start recording
        setIsRecording(true);
        
        const recorder = await startRecording();
        setMediaRecorder(recorder);
      }
    } catch (error) {
      console.error("Error with speech recognition:", error);
      setIsRecording(false);
      setIsProcessingSpeech(false);
      setMediaRecorder(null);
      
      // Show error message to user
      alert("Could not access microphone. Please check your browser permissions.");
    }
  };
  
  // Sample feature cards for farmers based on selected language
  const getFarmerFeatures = () => {
    if (selectedLanguage.code === "hi") {
      return [
        {
          title: "‡§´‡§∏‡§≤ ‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§®",
          description: "‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç",
          icon: "üå±",
          color: "green"
        },
        {
          title: "‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§≤‡§∞‡•ç‡§ü",
          description: "‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
          icon: "‚òÅÔ∏è",
          color: "blue"
        },
        {
          title: "‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø",
          description: "‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡•Ä ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç",
          icon: "üí∞",
          color: "amber"
        },
        {
          title: "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Å",
          description: "‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡•á‡§Ç",
          icon: "üìã",
          color: "purple"
        }
      ];
    } else if (selectedLanguage.code === "pa") {
      return [
        {
          title: "‡®´‡®∏‡®≤ ‡®∞‡©ã‡®ó ‡®™‡®õ‡®æ‡®£",
          description: "‡®Ü‡®™‡®£‡©Ä ‡®´‡®∏‡®≤ ‡®¶‡©Ä ‡®´‡©ã‡®ü‡©ã ‡®Ö‡®™‡®≤‡©ã‡®° ‡®ï‡®∞‡®® ‡®∞‡©ã‡®ó ‡®¶‡©Ä ‡®™‡®õ‡®æ‡®£ ‡®ï‡®∞‡®®",
          icon: "üå±",
          color: "green"
        },
        {
          title: "‡®Æ‡©å‡®∏‡®Æ ‡®Ö‡®≤‡®∞‡®ü",
          description: "‡®Ü‡®™‡®£‡©Ä‡®Ü‡®Ç ‡®´‡®∏‡®≤‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®™‡©ç‡®∞‡®≠‡®æ‡®µ‡®ø‡®§ ‡®ï‡®∞‡®® ‡®µ‡®æ‡®≤‡©Ä ‡®Æ‡©å‡®∏‡®Æ ‡®∏‡®•‡®ø‡®§‡©Ä ‡®¨‡®æ‡®∞‡©á ‡®∏‡®Æ‡©á‡®Ç ‡®∏‡®ø‡®∞ ‡®Ö‡®≤‡®∞‡®ü ‡®™‡©ç‡®∞‡®æ‡®™‡®§ ‡®ï‡®∞‡®®",
          icon: "‚òÅÔ∏è",
          color: "blue"
        },
        {
          title: "‡®¨‡®æ‡®ú‡®º‡®æ‡®∞ ‡®Æ‡©Å‡©±‡®≤",
          description: "‡®Ü‡®™‡®£‡©Ä‡®Ü‡®Ç ‡®´‡®∏‡®≤‡®æ‡®Ç ‡®≤‡®à ‡®Æ‡©å‡®ú‡©Ç‡®¶‡®æ ‡®¨‡®æ‡®ú‡®º‡®æ‡®∞ ‡®Æ‡©Å‡©±‡®≤ ‡®¶‡©Ä ‡®ú‡®æ‡®Ç‡®ö ‡®ï‡®∞‡®®",
          icon: "üí∞",
          color: "amber"
        },
        {
          title: "‡®∏‡®∞‡®ï‡®æ‡®∞‡©Ä ‡®Ø‡©ã‡®ú‡®®‡®æ‡®µ‡®æ‡®Ç",
          description: "‡®ï‡®ø‡®∏‡®æ‡®®‡®æ‡®Ç ‡®≤‡®à ‡®â‡®™‡®≤‡®¨‡®ß ‡®∏‡®∞‡®ï‡®æ‡®∞‡©Ä ‡®Ø‡©ã‡®ú‡®®‡®æ‡®µ‡®æ‡®Ç ‡®Ö‡®§‡©á ‡®∏‡®¨‡®∏‡®ø‡®°‡©Ä‡®Ü‡®Ç ‡®¨‡®æ‡®∞‡©á ‡®ú‡®æ‡®£‡©ã",
          icon: "üìã",
          color: "purple"
        }
      ];
    } else {
      // English and other languages
      return [
        {
          title: "Crop Disease Identification",
          description: "Upload photos of your crop and identify diseases",
          icon: "üå±",
          color: "green"
        },
        {
          title: "Weather Alerts",
          description: "Receive timely alerts about weather conditions affecting your crops",
          icon: "‚òÅÔ∏è",
          color: "blue"
        },
        {
          title: "Market Prices",
          description: "Check current market prices for your crops and plan your sales",
          icon: "üí∞",
          color: "amber"
        },
        {
          title: "Government Schemes",
          description: "Learn about government schemes and subsidies available for farmers",
          icon: "üìã",
          color: "purple"
        }
      ];
    }
  };
  
  const farmerFeatures = getFarmerFeatures();
  // Sample emojis for quick access
  const quickEmojis = ["üå±", "üåæ", "üåø", "üçÉ", "üå≤", "üå≥", "üå¥", "üåµ", "üå∑", "üå∏", "üåπ", "üå∫", "üåª", "üåº", "üçÄ", "üçÅ", "ÔøΩÔøΩÔøΩ2", "ÔøΩÔøΩÔøΩ4", "üåû", "üåßÔ∏è", "‚òî", "‚ù§Ô∏è", "üëç", "üòä"];
  
  const insertEmoji = (emoji: string) => {
    setInputText(prev => prev + emoji);
    setShowEmojiPicker(false);
  };
  
  // Quick question suggestions based on selected language
  const getQuickQuestions = () => {
    if (selectedLanguage.code === "hi") {
      return [
        "‡§Æ‡•á‡§∞‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        "‡§™‡•Ä‡§è‡§Æ ‡§ï‡§ø‡§∏‡§æ‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç?",
        "‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç",
        "‡§Æ‡•á‡§∞‡•á ‡§®‡§ú‡§¶‡•Ä‡§ï ‡§ï‡•á ‡§ï‡•É‡§∑‡§ø ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§ï‡§π‡§æ‡§Ç ‡§π‡•à‡§Ç?"
      ];
    } else {
      return [
        "What is the best time for wheat cultivation in my region?",
        "How to apply for PM Kisan Yojana?",
        "Provide information about crop insurance",
        "Where are the agricultural centers near me?"
      ];
    }
  };
  
  const quickQuestions = getQuickQuestions();
  
  return (
    <div className="flex h-[calc(100vh-4rem)]">
      {/* Sidebar */}
      <div className="hidden md:block border-r border-green-100 shadow-sm">
        <FarmerSidebar onTopicSelect={handleTopicSelect} />
      </div>
      
      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col bg-gradient-to-b from-green-50 to-white">
        {/* Header */}
        <div className="bg-white border-b border-green-100 p-4 shadow-sm">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="h-12 w-12 rounded-full bg-gradient-to-r from-emerald-400 to-teal-500 flex items-center justify-center text-white shadow-md">
                <span className="text-xl">ü§ñ</span>
              </div>
              <div>
                <h3 className="font-bold text-gray-800 text-lg">Krishi Sahayak Assistant</h3>
                <p className="text-xs text-gray-500">Powered by AI</p>
              </div>
            </div>
            
            {/* Language Selector */}
            <div className="relative">
              <button 
                onClick={() => setShowLanguageSelector(!showLanguageSelector)}
                className="flex items-center gap-2 px-3 py-2 rounded-full bg-green-50 hover:bg-green-100 text-green-700 transition-colors border border-green-200"
              >
                <span>{selectedLanguage.flag}</span>
                <span className="text-sm font-medium">{selectedLanguage.name}</span>
                <Globe className="h-4 w-4" />
              </button>
              
              {showLanguageSelector && (
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-green-100 z-50"
                >
                  <div className="py-2">
                    {languages.map((language) => (
                      <button
                        key={language.code}
                        onClick={() => handleLanguageSelect(language)}
                        className={`flex items-center gap-2 w-full px-4 py-2 text-left hover:bg-green-50 ${
                          selectedLanguage.code === language.code ? 'bg-green-100 text-green-800' : 'text-gray-700'
                        }`}
                      >
                        <span className="text-lg">{language.flag}</span>
                        <span className="text-sm">{language.name}</span>
                      </button>
                    ))}
                  </div>
                </motion.div>
              )}
            </div>
          </div>
        </div>
        
        {/* Messages Area */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((msg) => (
            <ChatMessage key={msg.id} message={msg} language={selectedLanguage.code} />
          ))}
          <div ref={messagesEndRef} />
        </div>
        
        {/* Input Area */}
        <div className="p-4 border-t border-green-100 bg-white">
          {/* Uploaded Images Preview */}
          {uploadedImages.length > 0 && (
            <div className="mb-3 flex flex-wrap gap-2">
              {uploadedImages.map((image, index) => (
                <ImageUploadPreview 
                  key={index} 
                  image={image} 
                  onRemove={() => handleRemoveImage(index)} 
                />
              ))}
            </div>
          )}
          
          {/* Input Box */}
          <div className="flex items-center gap-2">
            <div className="flex-1 flex items-center gap-2 bg-gray-100 rounded-full px-4 py-2 border border-gray-200">
              <textarea
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder={selectedLanguage.code === "hi" ? "‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Ø‡§π‡§æ‡§Ç ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç..." : "Type your message here..."}
                className="flex-1 bg-transparent border-none outline-none resize-none h-10 py-2 text-gray-800 placeholder-gray-500"
                style={{ maxHeight: "80px", minHeight: "40px" }}
              />
              
              {/* Emoji Picker Button */}
              <button 
                onClick={() => setShowEmojiPicker(!showEmojiPicker)}
                className="text-gray-500 hover:text-gray-700"
              >
                <Smile className="h-5 w-5" />
              </button>
              
              {/* File Upload Button */}
              <button 
                onClick={() => fileInputRef.current?.click()}
                className="text-gray-500 hover:text-gray-700"
              >
                <ImageIcon className="h-5 w-5" />
              </button>
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleImageUpload}
                accept="image/*"
                className="hidden"
                multiple
              />
              
              {/* Speech-to-Text Button */}
              <button 
                onClick={handleSpeechToText}
                className={`p-2 rounded-full ${isRecording ? 'bg-red-100 text-red-600 animate-pulse' : isProcessingSpeech ? 'bg-yellow-100 text-yellow-600' : 'text-gray-500 hover:text-gray-700'}`}
                disabled={isProcessingSpeech}
              >
                {isRecording ? <MicOff className="h-5 w-5" /> : <Mic className="h-5 w-5" />}
              </button>
            </div>
            
            {/* Send Button */}
            <button
              onClick={handleSendMessage}
              disabled={(!inputText.trim() && uploadedImages.length === 0) || isLoading}
              className={`p-3 rounded-full ${
                (!inputText.trim() && uploadedImages.length === 0) || isLoading
                  ? 'bg-gray-200 text-gray-400'
                  : 'bg-green-600 text-white hover:bg-green-700'
              }`}
            >
              {isLoading ? <Loader2 className="h-5 w-5 animate-spin" /> : <Send className="h-5 w-5" />}
            </button>
            
            {/* Clear Chat Button */}
            <button
              onClick={handleClearChat}
              className="p-3 rounded-full text-gray-500 hover:text-gray-700 hover:bg-gray-100"
              title="Clear chat"
            >
              <Trash2 className="h-5 w-5" />
            </button>
          </div>
          
          {/* Emoji Picker Dropdown */}
          {showEmojiPicker && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              className="mt-2 p-2 bg-white rounded-lg shadow-lg border border-gray-200 flex flex-wrap gap-2"
            >
              {/* Quick emojis */}
              {quickEmojis.map((emoji) => (
                <button
                  key={emoji}
                  onClick={() => insertEmoji(emoji)}
                  className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 rounded text-xl"
                >
                  {emoji}
                </button>
              ))}
            </motion.div>
          )}
          
          {/* Quick Questions */}
          <div className="mt-3 flex flex-wrap gap-2">
            {quickQuestions.map((question, index) => (
              <button
                key={index}
                onClick={() => setInputText(question)}
                className="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-1.5 rounded-full"
              >
                {question.length > 40 ? question.substring(0, 40) + "..." : question}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}